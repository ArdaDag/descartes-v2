// Copyright (C) 2020 Cartesi Pte. Ltd.

// SPDX-License-Identifier: GPL-3.0-only
// This program is free software: you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.

// This program is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
// PARTICULAR PURPOSE. See the GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Note: This component currently has dependencies that are licensed under the GNU
// GPL, version 3, and so you should treat this component as a whole as being under
// the GPL version 3. But all Cartesi-written code in this component is licensed
// under the Apache License, version 2, or a compatible permissive license, and can
// be used independently under the Apache v2 license. After this component is
// rewritten, the entire component will be released under the Apache v2 license.

/// @title Validator Manager
pragma solidity ^0.7.0;

import "./Portal.sol";

contract PortalImpl is Portal {

    modifier onlyOutputContract {
        require(msg.sender == outputcontract, "msg.sender != outputContract");
        _;
    }

    /// @notice deposits ether in portal contract and create ether in L2
    /// @param _receivers array with receivers addresses
    /// @param _amounts array of amounts of ether to be distributed
    /// @param _data information to be interpreted by L2
    /// @return hash of input generated by deposit
    /// @dev  receivers[i] receive amounts[i]
    function etherDeposit(
        address[] calldata _receivers,
        uint256[] calldata _amounts,
        bytes calldata _data
    ) public payable override returns (bytes32) {
        require(sum(_amounts) == msg.value);

        bytes input = type + receivers.length + receivers + amounts + data;
        return inputContract.sendInput(input)

    }

    /// @notice deposits ERC20 in portal contract and create tokens in L2
    /// @param _ERC20 address of ERC20 token to be deposited
    /// @param _receivers array with receivers addresses
    /// @param _amounts array of amounts of ether to be distributed
    /// @param _data information to be interpreted by L2
    /// @return hash of input generated by deposit
    /// @dev  receivers[i] receive amounts[i]
    function erc20Deposit(
        address _ERC20,
        address[] calldata _receivers,
        uint256[] calldata _amounts,
        bytes calldata _data
    ) public override returns (bytes32) {
        IERC20 token = IERC20(_ERC20);

        uint356 totalAmounts = sum(_amounts)
        token.transferFrom(msg.sender, sum(amounts)) or for receiver in receivers token.transferFrom(receiver, amount[i])

        bytes input = type + receivers.length + receivers + amounts + data;
        
        return inputContract.sendInput(input);
    }

    /// @notice deposits generic assets
    /// @param _data information to be interpreted by L2
    /// @dev the onchain code doesn't understand any of this
    ///      its up to the offchain code to parse the data
    ///      and guarantee that the deposit was made
    function genericDeposit(bytes calldata _data)
        public
        override
        returns (bytes32)
    {
        bytes input = type + data;
    }

    /// @notice executes a descartesV2 output
    /// @param _data data with information necessary to execute output
    /// @return status of output execution
    /// @dev can only be called by Output contract
    function executeDescartesV2Output(bytes32 _data)
        public
        override
        onlyOuputContract 
        returns (bool)
    {
        OperationType oType = _data[0:1];

        if oType == etherOp {
            // maybe this is individual?
            uint256 numOfReceivers = _data[1:2];
            address[] receiveirs;
            uint256[] amounts;

            for i = 0; i < numOfReceivers; i++
                // not the right quantity of bytes
                receivers.push(_data[2 + i: 3 + i])
                amounts.push(_data[2 + numOfReceivers + i:  3 + numOfReceivers + i])

            return etherWithdrawal(receivers, amounts)
        } 

        if oType = ERC20Op {
            // not the right quantity of bytes
            address erc20Addr = _data[2:3];
            for i = 0; i < numOfReceivers; i++
                // not the right quantity of bytes
                receivers.push(_data[2 + i: 3 + i])
                amounts.push(_data[2 + numOfReceivers + i:  3 + numOfReceivers + i])

            return erc20Withdrawal(erc20Addr, receivers, amounts)
        } 
         
        if oType = GenericOp {
            address To = data[0:19];
            bytes Payload = data[20:];
            delegateCall(To, Payload);
        }
    }

    /// @notice withdrawal ether
    /// @param _receivers array with receivers addresses
    /// @param _amounts array of amounts of ether to be distributed
    /// @return status of withdrawal
    function etherWithdrawal(
        address[] calldata _receivers,
        uint256[] calldata _amounts
    ) onlyOuputContract internal returns (bool) {}

    /// @notice withdrawal ERC20
    /// @param _ERC20 address of ERC20 token to be deposited
    /// @param _receivers array with receivers addresses
    /// @param _amounts array of amounts of ether to be distributed
    /// @return status of withdrawal
    function erc20Withdrawal(
        address _ERC20,
        address[] calldata _receivers,
        uint256[] calldata _amounts
    ) onlyOuputContract internal returns (bool) {}

}
